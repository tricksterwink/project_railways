"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertPlainColor = convertPlainColor;
exports.convertColorOpacity = convertColorOpacity;
exports.convertBorderWidth = convertBorderWidth;
exports.toNumber = toNumber;
exports.htmlBorderRadiusNotSvgError = void 0;

var _bobspaceHtmlColors = _interopRequireDefault(require("./external/bobspace:html-colors"));

var _heygradyUnitsLength = _interopRequireDefault(require("./external/heygrady:units:length"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function convertPlainColor(val) {
  var _val, _val2, _val3;

  if (!val) return '#000';
  val = (_val = val) === null || _val === void 0 ? void 0 : _val.toLowerCase();
  if ((_val2 = val) !== null && _val2 !== void 0 && _val2.match(/#([0-9a-f]{3}){1,2}/)) return val;else if ((_val3 = val) !== null && _val3 !== void 0 && _val3.match(/^(rgb|hsl)a?\(([^,]{1,3},? *){3}(\d*\.?\d+)?\)/)) return val.replace('a', '').replace(/\((([\d%]{1,3}, *){2}([\d%]{1,3}))(, *\d*\.?\d+)?\)/, '($1)');else if (_bobspaceHtmlColors["default"].map(function (color) {
        return color.toLowerCase();
      }).includes(val.toLowerCase())) return val;else if (val === 'currentcolor') {
        return 'currentcolor';
      } else return '#000';
}

function convertColorOpacity(val) {
  if (val !== null && val !== void 0 && val.startsWith('rgba') || val !== null && val !== void 0 && val.startsWith('hsla')) {
    return Number(val.match(/(\d*\.?\d+)?\)$/)[1]);
  } else return 1;
}

var htmlLengthNotSvgErrorTemplate = function htmlLengthNotSvgErrorTemplate(a, b) {
  return "<RoundDiv> ".concat(a, " must be ").concat(b ? "either ".concat(b, ", or") : '', " in one of the following units: ch, cm, em, ex, in, mm, pc, pt, px, rem, vh, vmax, vmin, vw.");
};

var htmlBorderLengthNotSvgError = new Error(htmlLengthNotSvgErrorTemplate('border lengths', '"thin", "medium", "thick"'));
var htmlBorderRadiusNotSvgError = new Error(htmlLengthNotSvgErrorTemplate('border radii'));
exports.htmlBorderRadiusNotSvgError = htmlBorderRadiusNotSvgError;

function toNumber(length, element, err) {
  if (!length) return false;
  if (typeof length === 'number' || !length.match(/\D+/)) return Number(length);else if (length !== null && length !== void 0 && length.match(/(cap|ic|lh|rlh|vi|vm|vb|Q|mozmm)/g)) {
    if (err) throw err;else return false;
  } else if (length !== null && length !== void 0 && length.match(/(\d+(\.\d+)?(ch|cm|em|ex|in|mm|pc|pt|px|rem|vh|vmax|vmin|vw)|0)/)) return (0, _heygradyUnitsLength["default"])(element, length);
}

function convertBorderWidth(val, element) {
  if (!val) return 0;
  if ((val === null || val === void 0 ? void 0 : val.toLowerCase()) === 'thin') return 1;else if ((val === null || val === void 0 ? void 0 : val.toLowerCase()) === 'medium') return 3;else if ((val === null || val === void 0 ? void 0 : val.toLowerCase()) === 'thick') return 5;else return toNumber(val, element, htmlBorderLengthNotSvgError) || 0;
}