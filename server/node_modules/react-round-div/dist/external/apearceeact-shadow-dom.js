"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var constructableStylesheetsSupported = window && window.ShadowRoot && window.ShadowRoot.prototype.hasOwnProperty('adoptedStyleSheets') && window.CSSStyleSheet && window.CSSStyleSheet.prototype.hasOwnProperty('replace');
var shadowRootSupported = window && window.Element && window.Element.prototype.hasOwnProperty('attachShadow');

var ShadowRoot = function (_React$PureComponent) {
  _inherits(ShadowRoot, _React$PureComponent);

  var _super = _createSuper(ShadowRoot);

  function ShadowRoot() {
    var _this;

    _classCallCheck(this, ShadowRoot);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "state", {
      initialized: false
    });

    _this.placeholder = _react["default"].createRef();
    return _this;
  }

  _createClass(ShadowRoot, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          delegatesFocus = _this$props.delegatesFocus,
          mode = _this$props.mode,
          stylesheets = _this$props.stylesheets;
      this.shadowRoot = this.placeholder.current.parentNode.attachShadow({
        delegatesFocus: delegatesFocus,
        mode: mode
      });

      if (stylesheets) {
        this.shadowRoot.adoptedStyleSheets = stylesheets;
      }

      this.setState({
        initialized: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.state.initialized) {
        return _react["default"].createElement("span", {
          ref: this.placeholder
        });
      }

      return _reactDom["default"].createPortal(this.props.children, this.shadowRoot);
    }
  }]);

  return ShadowRoot;
}(_react["default"].PureComponent);

exports["default"] = ShadowRoot;

_defineProperty(ShadowRoot, "constructableStylesheetsSupported", constructableStylesheetsSupported);

_defineProperty(ShadowRoot, "constructibleStylesheetsSupported", constructableStylesheetsSupported);

_defineProperty(ShadowRoot, "defaultProps", {
  delegatesFocus: false,
  mode: 'open'
});

_defineProperty(ShadowRoot, "displayName", 'ReactShadowRoot');

_defineProperty(ShadowRoot, "propTypes", {
  delegatesFocus: _propTypes["default"].bool,
  mode: _propTypes["default"].oneOf(['open', 'closed']),
  stylesheets: _propTypes["default"].arrayOf(function (propValue, idx, componentName, location, propFullName) {
    if (!(propValue[idx] instanceof window.CSSStyleSheet)) {
      return new Error("Invalid prop `".concat(propFullName, "` supplied to `").concat(componentName, "`. Expected an instance of `CSSStyleSheet`."));
    }
  })
});

_defineProperty(ShadowRoot, "shadowRootSupported", shadowRootSupported);