"use strict";

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
    var matches = (this.document || this.ownerDocument).querySelectorAll(s),
        i = matches.length;

    while (--i >= 0 && matches.item(i) !== this) {}

    return i > -1;
  };
}

if (typeof window.getMatchedCSSRules !== 'function') {
  var toArray = function toArray(list) {
    return [].slice.call(list);
  };

  var getSheetRules = function getSheetRules(stylesheet) {
    var sheet_media = stylesheet.media && stylesheet.media.mediaText;
    if (stylesheet.disabled) return [];
    if (sheet_media && sheet_media.length && !window.matchMedia(sheet_media).matches) return [];
    return toArray(stylesheet.cssRules);
  };

  var _find = function _find(string, re) {
    var matches = string.match(re);
    return re ? re.length : 0;
  };

  var calculateScore = function calculateScore(selector) {
    var score = [0, 0, 0],
        parts = selector.split(' '),
        part,
        match;

    while (part = parts.shift(), typeof part == 'string') {
      match = _find(part, PSEUDO_ELEMENTS_RE);
      score[2] = match;
      match && (part = part.replace(PSEUDO_ELEMENTS_RE, ''));
      match = _find(part, PSEUDO_CLASSES_RE);
      score[1] = match;
      match && (part = part.replace(PSEUDO_CLASSES_RE, ''));
      match = _find(part, ATTR_RE);
      score[1] += match;
      match && (part = part.replace(ATTR_RE, ''));
      match = _find(part, ID_RE);
      score[0] = match;
      match && (part = part.replace(ID_RE, ''));
      match = _find(part, CLASS_RE);
      score[1] += match;
      match && (part = part.replace(CLASS_RE, ''));
      score[2] += _find(part, ELEMENT_RE);
    }

    return parseInt(score.join(''), 10);
  };

  var getSpecificityScore = function getSpecificityScore(element, selector_text) {
    var selectors = selector_text.split(','),
        selector,
        score,
        result = 0;

    while (selector = selectors.shift()) {
      if (element.matches(selector)) {
        score = calculateScore(selector);
        result = score > result ? score : result;
      }
    }

    return result;
  };

  var sortBySpecificity = function sortBySpecificity(element, rules) {
    function compareSpecificity(a, b) {
      return getSpecificityScore(element, b.selectorText) - getSpecificityScore(element, a.selectorText);
    }

    return rules.sort(compareSpecificity);
  };

  var ELEMENT_RE = /[\w-]+/g,
      ID_RE = /#[\w-]+/g,
      CLASS_RE = /\.[\w-]+/g,
      ATTR_RE = /\[[^\]]+\]/g,
      PSEUDO_CLASSES_RE = /\:(?!not)[\w-]+(\(.*\))?/g,
      PSEUDO_ELEMENTS_RE = /\:\:?(after|before|first-letter|first-line|selection)/g;

  window.getMatchedCSSRules = function (element) {
    var style_sheets,
        sheet,
        sheet_media,
        rules,
        rule,
        result = [];
    style_sheets = toArray(window.document.styleSheets);

    while (sheet = style_sheets.shift()) {
      rules = getSheetRules(sheet);

      while (rule = rules.shift()) {
        if (rule.styleSheet) {
          rules = getSheetRules(rule.styleSheet).concat(rules);
          continue;
        } else if (rule.media) {
            rules = getSheetRules(rule).concat(rules);
            continue;
          }

        if (element.matches(rule.selectorText)) {
          result.push(rule);
        }
      }
    }

    return sortBySpecificity(element, result);
  };
}