"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = updateStates;

var _cssUtils = require("./css-utils");

var _stylesExtractor = _interopRequireDefault(require("./external/styles-extractor"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var lazySetArrayState = function lazySetArrayState(setState, newState) {
  return setState(function (oldState) {
    if (oldState.every(function (val, i) {
      return val === newState[i];
    })) return oldState;else return newState;
  });
};

function updateStates(args) {
  var _div$current, _window;

  var div = args.div,
      setPosition = args.setPosition,
      setHeight = args.setHeight,
      setWidth = args.setWidth;
  var boundingClientRect = (_div$current = div.current) === null || _div$current === void 0 ? void 0 : _div$current.getBoundingClientRect();
  var height, width;

  if (boundingClientRect) {
    lazySetArrayState(setPosition, [boundingClientRect.x, boundingClientRect.y]);
    height = boundingClientRect.height;
    width = boundingClientRect.width;
    setHeight(height);
    setWidth(width);
  }

  function camelise(str) {
    return str === null || str === void 0 ? void 0 : str.replace(/^\w|[A-Z]|\b\w|\s+/g, function (match, index) {
      if (+match === 0) return "";
      return index === 0 ? match.toLowerCase() : match.toUpperCase();
    }).replace(/-/g, '');
  }

  var getNthStyle = function getNthStyle(key, n) {
    var returnNthOverwrittenOrCurrent = function returnNthOverwrittenOrCurrent(r) {
      var _r$current;

      return !r ? false : (r === null || r === void 0 ? void 0 : r.overwritten.length) > 0 ? r.overwritten[n !== null && n !== void 0 ? n : 0].value : (_r$current = r.current) === null || _r$current === void 0 ? void 0 : _r$current.value;
    };

    var normal = (0, _stylesExtractor["default"])(key, div.current);
    var camelised = (0, _stylesExtractor["default"])(camelise(key), div.current);
    return returnNthOverwrittenOrCurrent(normal) || returnNthOverwrittenOrCurrent(camelised);
  };

  var getBorderStyles = function getBorderStyles(key, n) {
    return [getNthStyle('border-top-' + key, n), getNthStyle('border-right-' + key, n), getNthStyle('border-bottom-' + key, n), getNthStyle('border-left-' + key, n)];
  };

  var getBorderRadii = function getBorderRadii(n) {
    return [getNthStyle('border-top-right-radius', n), getNthStyle('border-top-left-radius', n), getNthStyle('border-bottom-right-radius', n), getNthStyle('border-bottom-left-radius', n)];
  };

  var states = args;

  var lazySetRadius = function lazySetRadius(newState) {
    return lazySetArrayState(states.setRadius, newState);
  },
      lazySetBorderColor = function lazySetBorderColor(newState) {
    return lazySetArrayState(states.setBorderColor, newState);
  },
      lazySetBorderOpacity = function lazySetBorderOpacity(newState) {
    return lazySetArrayState(states.setBorderOpacity, newState);
  },
      lazySetBorderWidth = function lazySetBorderWidth(newState) {
    return lazySetArrayState(states.setBorderWidth, newState);
  };

  var divStyle = div.current ? (_window = window) === null || _window === void 0 ? void 0 : _window.getComputedStyle(div.current) : null;
  if (!divStyle) return;

  _reactDom["default"].unstable_batchedUpdates(function () {
    lazySetRadius(getBorderRadii(1).map(function (s) {
      return Math.min((0, _cssUtils.toNumber)(s, div.current, _cssUtils.htmlBorderRadiusNotSvgError), height / 2, width / 2);
    }));
    lazySetBorderColor(getBorderStyles('color', 1).map(function (s) {
      return (0, _cssUtils.convertPlainColor)(s);
    }));
    lazySetBorderOpacity(getBorderStyles('color', 1).map(function (s) {
      return (0, _cssUtils.convertColorOpacity)(s);
    }));
    lazySetBorderWidth(getBorderStyles('width', 0).map(function (s) {
      return (0, _cssUtils.convertBorderWidth)(s, div.current);
    }));
  });
}