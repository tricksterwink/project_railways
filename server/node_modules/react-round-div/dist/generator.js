"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateSvgSquircle;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function generateSvgSquircle(height, width, radius) {
  var ratios = [1.528665037, 1.0884928889, 0.8684068148, 0.07491140741, 0.6314939259, 0.1690595556, 0.3728238519];
  var roundToNthPlace = 1;
  if (typeof radius === 'number') radius = Array(4).fill(radius);else if (radius.length === 2) radius.push(radius[0]);
  if (radius.length === 3) radius.push(radius[1]);
  height = Number(height);
  width = Number(width);

  var _rawRadius = _toConsumableArray(radius).map(function (n) {
    return Number(n);
  });

  var max = radius.length - 1;

  var next = function next(i) {
    return i === max ? 0 : i + 1;
  };

  var prev = function prev(i) {
    return i === 0 ? max : i - 1;
  };

  radius = _rawRadius.map(function (radius, i) {
    return Math.min(radius, Math.min(height - _rawRadius[i % 2 === 0 ? prev(i) : next(i)], height / 2), Math.min(width - _rawRadius[i % 2 === 0 ? next(i) : prev(i)], width / 2));
  });

  var _Array$fill$map = Array(7).fill(Array(4).fill(0)).map(function (a, i) {
    return a.map(function (b, j) {
      return radius[j] * ratios[i];
    });
  }),
      _Array$fill$map2 = _slicedToArray(_Array$fill$map, 7),
      a0x = _Array$fill$map2[0],
      a1x = _Array$fill$map2[1],
      a2x = _Array$fill$map2[2],
      a3y = _Array$fill$map2[3],
      a3x = _Array$fill$map2[4],
      b1y = _Array$fill$map2[5],
      b1x = _Array$fill$map2[6],
      b0y = a3y,
      b0x = a3x;

  if (isNaN(height)) throw new Error("'height' must be a number");
  if (isNaN(width)) throw new Error("'width' must be a number");
  if (radius.includes(NaN)) throw new Error("'radius' must be a number or an array containing 2 to 4 numbers");

  var a0xF = function a0xF(x) {
    return Math.min(x / 2, a0x[0]);
  },
      a0xw = a0xF(width),
      a0xh = a0xF(height);

  var yOffsetF = function yOffsetF(x) {
    return 0;
  },
      hyOffset = yOffsetF(height) || 0,
      wyOffset = yOffsetF(width) || 0;

  var startPoint = "".concat(a0xw, ",").concat(wyOffset);
  return "M".concat(startPoint, "\n    ").concat(width / 2 < a0x[1] ? '' : "L".concat(width - a0xw, ",0"), "\n    \n    C").concat(width - a1x[1], ",0,").concat(width - a2x[1], ",0,").concat(width - a3x[1], ",").concat(a3y[1], "\n    C").concat(width - b1x[1], ",").concat(b1y[1], ",").concat(width - b1y[1], ",").concat(b1x[1], ",").concat(width - b0y[1], ",").concat(b0x[1], "\n    C").concat(width, ",").concat(a2x[1], ",").concat(width, ",").concat(a1x[1], ",\n    \n    ").concat(width - hyOffset, ",").concat(a0xh, "\n    ").concat(height / 2 < a0x[2] ? '' : "L".concat(width, ",").concat(height - a0xh), "\n    \n    C").concat(width, ",").concat(height - a1x[2], ",").concat(width, ",").concat(height - a2x[2], ",").concat(width - a3y[2], ",").concat(height - a3x[2], "\n    C").concat(width - b1y[2], ",").concat(height - b1x[2], ",").concat(width - b1x[2], ",").concat(height - b1y[2], ",").concat(width - b0x[2], ",").concat(height - b0y[2], "\n    C").concat(width - a2x[2], ",").concat(height, ",").concat(width - a1x[2], ",").concat(height, ",\n    \n    ").concat(width - a0xw, ",").concat(height - wyOffset, "\n    ").concat(width / 2 < a0x[3] ? '' : "L".concat(a0xw, ",").concat(height), "\n    \n    C").concat(a1x[3], ",").concat(height, ",").concat(a2x[3], ",").concat(height, ",").concat(a3x[3], ",").concat(height - a3y[3], "\n    C").concat(b1x[3], ",").concat(height - b1y[3], ",").concat(b1y[3], ",").concat(height - b1x[3], ",").concat(b0y[3], ",").concat(height - b0x[3], "\n    C0,").concat(height - a2x[3], ",0,").concat(height - a1x[3], ",\n    \n    ").concat(hyOffset, ",").concat(height - a0xh, "\n    ").concat(height / 2 < a0x[0] ? '' : "L0,".concat(a0xh), "\n    \n    C0,").concat(a1x[0], ",0,").concat(a2x[0], ",").concat(a3y[0], ",").concat(a3x[0], "\n    C").concat(b1y[0], ",").concat(b1x[0], ",").concat(b1x[0], ",").concat(b1y[0], ",").concat(b0x[0], ",").concat(b0y[0], "\n    C").concat(a2x[0], ",0,").concat(a1x[0], ",0,").concat(startPoint, "\n    Z").replace(/[\n ]/g, '').replace(/NaN/g, '0').replace(/\d+\.\d+/g, function (match) {
    return Math.round(Number(match) * Math.pow(10, roundToNthPlace)) / Math.pow(10, roundToNthPlace);
  });
}